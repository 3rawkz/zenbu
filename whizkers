#!/usr/bin/env python2

description = """
A pystache based config templater.

Searches for a yaml file with a variable mapping in
~/.config/whizkers/variables.yaml,

a yaml file with an ignore sequence in (by default)
~/.config/whizkers/ignores.yaml,

and uses the templates in (by default)
~/.config/whizkers/templates/

to render into your home directory (by default).

Additional variable files can be applied
by supplying them as arguments, in order of application.

They can either be paths or, if located in
~/.config/whizkers/variable_sets/,
extension-less filenames.
"""

import os
import codecs
import yaml
import re
from sys import exit
from argparse import ArgumentParser
from termcolor import cprint
from pystache.renderer import Renderer
from pystache.common import MissingTags
from pystache.context import KeyNotFoundError


HOME = os.getenv('HOME')
CONFIG_DIR = os.getenv(
    'XDG_CONFIG_HOME',
    os.path.join(HOME, '.config'))
WHIZKERS_ROOT = os.path.join(
    CONFIG_DIR, 'whizkers')
WHIZKERS_VARS = os.path.join(
    WHIZKERS_ROOT, 'variables.yaml')
WHIZKERS_VAR_SETS = os.path.join(
    WHIZKERS_ROOT, 'variable_sets')
WHIZKERS_IGNORES = os.path.join(
    WHIZKERS_ROOT, 'ignores.yaml')
WHIZKERS_TEMPLATES = os.path.join(
    WHIZKERS_ROOT, 'templates')

def parse_args():
    parser = ArgumentParser(description=description)
    parser.add_argument('-l',
                        help="""
                        list variable sets.
                        """,
                        dest='list_var_sets',
                        action='store_true',
                        default=False)
    parser.add_argument('-t',
                        help="""
                        template directory.
                        Default: %s
                        """ % WHIZKERS_TEMPLATES,
                        dest='template_dir',
                        type=str,
                        default=WHIZKERS_TEMPLATES)
    parser.add_argument('-d',
                        help="""
                        destination directory.
                        Default: %s
                        """ % HOME,
                        dest='dest_dir',
                        type=str,
                        default=HOME)
    parser.add_argument('-i',
                        help="""
                        ignores file.
                        Default: %s
                        """ % WHIZKERS_IGNORES,
                        dest='ignores_file',
                        type=str,
                        default=WHIZKERS_IGNORES)
    parser.add_argument('variable_files',
                        help="additional variable files",
                        nargs='*',
                        type=str)
    return parser.parse_args()


def main():
    errs = False
    args = parse_args()

    variables = {}
    ignores = set()
    renderer = Renderer(
        missing_tags=MissingTags.strict,    # Alert on missing vars
        escape=lambda _: _,                 # Don't escape
    )

    # Helper functions
    def update_variables(filename):
        with codecs.open(filename, 'r', 'utf-8') as f:
            variables.update(yaml.load(f.read()) or {})
            print("Using \"%s\"..." % filename)

    # Read ignores file
    try:
        with codecs.open(args.ignores_file, 'r', 'utf-8') as f:
            ignores |= set(yaml.load(f.read()))
    except IOError:
        pass

    # Pre-compile regexes
    ignores = [re.compile(i) for i in ignores]

    # Did we request a listing of variable sets?
    if args.list_var_sets:

        # Does our folder exist?
        if os.path.exists(WHIZKERS_VAR_SETS):

            # Get all the paths...
            for name in os.listdir(WHIZKERS_VAR_SETS):
                path = os.path.join(WHIZKERS_VAR_SETS, name)
                if os.path.isfile(path):

                    # Check if we should ignore it
                    ignore = False

                    for pattern in ignores:
                        if pattern.match(name):
                            ignore = True
                            break

                    if not ignore:
                        print(re.sub('\.yaml$', '', name))
        else:
            cprint("Variable sets folder %s not found." % WHIZKERS_VAR_SETS,
                   'yellow')
        exit(0)

    # Read the config
    try:
        update_variables(WHIZKERS_VARS)
    except IOError:
        pass

    # Read additional files
    for name in args.variable_files:
        try:
            update_variables(name)
        except IOError:

            # Try opening just by name
            name = os.path.join(WHIZKERS_VAR_SETS, '%s.yaml' % name)
            try:
                update_variables(name)
            except IOError:
                cprint("Variable file %s not found." % name, 'red')
                errs = True

    if not variables:
        cprint("No variables provided.", 'red')
        errs = True

    # Errors?
    if errs:
        cprint("\nErrors occurred - abort.", 'red')
        exit(1)

    # Exit code, in case one of the templates doesn't render
    exit_code = 0

    # Loop through the templates
    for root, subdirs, files in os.walk(args.template_dir):

        # Substitute the template dir for home dir
        dest_root = re.sub('^%s' % args.template_dir,
                           args.dest_dir, root)

        # Iterate through templates
        for name in files:
            ignore = False

            # Check ignore list
            for pattern in ignores:
                if pattern.match(name):
                    ignore = True
                    break

            if ignore:
                continue

            template = os.path.join(root, name)
            dest_file = os.path.join(dest_root, name)

            # Make the directory
            if not os.path.exists(dest_root):
                os.makedirs(dest_root)

            # Apply variables
            try:
                with codecs.open(template, 'r', 'utf-8') as f:
                    applied = renderer.render(f.read(), variables)
            except KeyNotFoundError as e:
                cprint("Render error in %s:\n    %s" % (template, e), 'red')
                exit_code = 1
            else:
                with codecs.open(dest_file, 'w', 'utf-8') as f:
                    f.write(applied)
                cprint("Successfully rendered %s." % template, 'green')

    exit(exit_code)

if __name__ == '__main__':
    main()
